pipeline {
    agent { docker { image 'python:3-alpine' } }
    stages {
        stage('Git') {
            steps{
                // echo 'Getting the code from GitHub...'
                git 'https://github.com/daniera3/NEDD-API-server.git'
            }
        }
        stage('Requirements'){
            steps{
                withEnv(["HOME=${env.WORKSPACE}"]) {
                    //echo 'Installing Requirements...'
                    sh 'pip3.7 install -U -r requirements.txt --user'
		    sh 'pip3 install --user -U requests'
		    sh 'pip3 install --user -U coverage'
                }
            }
        }
	stage('Static code metrics') {
            steps {
	     withEnv(["HOME=${env.WORKSPACE}"]) {
                echo "Test coverage"
                sh  'python3 -m coverage xml xml ./coverage.xml'
                echo "Style check"
                sh  ''' 
                        pylint ./ || true
                    '''
		}
            }
            post{
                always{
		withEnv(["HOME=${env.WORKSPACE}"]) {
                    step([$class: 'CoberturaPublisher',
                                   autoUpdateHealth: false,
                                   autoUpdateStability: false,
                                   coberturaReportFile: './coverage.xml',
                                   failNoReports: false,
                                   failUnhealthy: false,
                                   failUnstable: false,
                                   maxNumberOfBuilds: 10,
                                   onlyStable: false,
                                   sourceEncoding: 'ASCII',
                                   zoomCoverageChart: false])
				   }
                }
            }
        }
        stage('Run Tests'){
            steps{
                // echo 'Testing User app...'
		withEnv(["HOME=${env.WORKSPACE}"]) {
	 	        sh "python3.7 -m pytest -v  --junitxml=./nosetests.xml"
			}
            }
	  }
       
    
    }//close pipline
     post {
        always {
	withEnv(["HOME=${env.WORKSPACE}"]) {
	    junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/nosetests.xml'
	    }
        }
        failure {
            mail to: 'danirabinovich123@gmail.com', subject: 'The Pipeline failed :(',body:'test'
	
        }
    }
}
